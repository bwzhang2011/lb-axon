project.ext {
    bundleInportPackages = [ '*' ]
    bundleExportPackages = [ '*' ]
}

dependencies {
    compile project(':lb-axon-common')
    compile project(':lb-axon-chronicle')
    compile project(':lb-axon-hazelcast')

    compile("org.osgi:org.osgi.core:$versions.osgi")
    compile("org.osgi:org.osgi.compendium:$versions.osgi")

    testCompile "javax.inject:javax.inject:1"
    testCompile "org.ops4j.pax.exam:pax-exam-junit4:$versions.paxExam"
    testRuntime "org.ops4j.pax.exam:pax-exam-container-native:$versions.paxExam"
    testRuntime "org.ops4j.pax.exam:pax-exam-link-mvn:$versions.paxExam"
    testRuntime "org.ops4j.pax.url:pax-url-aether:$versions.paxUrl"
    testRuntime "org.ops4j.pax.url:pax-url-reference:$versions.paxUrl"
    testRuntime "org.ops4j.pax.url:pax-url-wrap:$versions.paxUrl"
    testRuntime "org.apache.felix:org.apache.felix.framework:$versions.felix"
}

jar {
    manifest {
        instruction 'Bundle-Activator', 'org.axonframework.ext.osgi.AxonActivator'
        instruction 'Import-Package'  , bundleInportPackages.join(',')
        instruction 'Export-Package'  , bundleExportPackages.join(',')
    }
}

test {
    systemProperties = configurations.testCompile.resolvedConfiguration.resolvedArtifacts.collectEntries {
        [ (it.moduleVersion.id.group + ":" + it.moduleVersion.id.name) : "${it.moduleVersion.id.version}" ]
    } + [ 
        'project.version'                    : "${project.version}" ,
        'org.ops4j.pax.url.mvn.proxySupport' : 'true'
    ]
}

// *****************************************************************************
//
// *****************************************************************************

task generateDependsFile {
    // In order to fully use org.ops4j.pax.exam.CoreOptions.maven() stuff
    // we need to generate a META-INF/maven/dependencies.properties file
    // just like the generate-depends-file Maven goal from ServiceMix/Karaf

    File outputFileDir = project.file( "${project.buildDir}/classes/test/META-INF/maven/" )
    File outputFile = new File( outputFileDir, 'dependencies.properties' )

    outputs.file outputFile

    doFirst {
        outputFileDir.mkdirs()

        Properties properties = new Properties();

        // first we add our GAV info
        properties.setProperty( "groupId", "${project.group}" );
        properties.setProperty( "artifactId", project.name );
        properties.setProperty( "version", "${project.version}" );
        properties.setProperty( "${project.group}/${project.name}/version", "${project.version}" );

        // then for all our deps
        project.configurations.testRuntime.resolvedConfiguration.resolvedArtifacts.each {
            final String keyBase = it.moduleVersion.id.group + '/' + it.moduleVersion.id.name;
            properties.setProperty( "${keyBase}/scope", "compile" )
            properties.setProperty( "${keyBase}/type", it.extension )
            properties.setProperty( "${keyBase}/version", it.moduleVersion.id.version )
        }

        FileOutputStream outputStream = new FileOutputStream( outputFile );
        try {
            properties.store( outputStream, "Generated from Gradle by Hibernate build for PaxExam testing of hibernate-osgi module" )
        }
        finally {
            outputStream.close()
        }
    }
}

task printResolvedDependencies(dependsOn: classes) << {
    configurations.testCompile.resolvedConfiguration.resolvedArtifacts.each {       
        println "$it.moduleVersion.id.group:$it.moduleVersion.id.name:$it.moduleVersion.id.version"
    }
}

// *****************************************************************************
//
// *****************************************************************************

tasks.test.dependsOn tasks.jar
tasks.test.dependsOn tasks.generateDependsFile
