// *****************************************************************************
//
// *****************************************************************************

subprojects {

    apply plugin: 'java'
	apply plugin: 'groovy'
    apply plugin: 'osgi'
    apply plugin: 'maven'

    version             = '1.0.0.SNAPSHOT'
    group               = 'com.github.lburgazzoli'
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    ext {
		versions = [
			'slf4j'              : '1.7.5',
			'log4j'              : '1.2.17',
			'jackson'            : '2.4.1',
			'jacksonAnnotations' : '2.4.1',
			'openhftLang'        : '6.4.4',
			'openhftChronicle'   : '3.1.1',
			'hazelcast'          : '3.2.3',
			'osgi'               : '5.0.0',
			'guava'              : '17.0',
			'axon'               : '2.2',
			'junit'              : '4.11',
			'felix'              : '4.4.0',
			'paxExam'            : '4.0.0',
			'paxUrl'             : '2.1.0',
			'jgroups'            : '3.4.4.Final',
			'commonsLang'        : '3.3.2',
			'commonsBeanutils'   : '1.9.1',
			'commonsCollections' : '4.0',
			'javaxCache'         : '1.0.0',
			'spring'             : '3.2.9.RELEASE',
			'groovy'             : '2.3.3',
			'jodaTime'           : '2.3'
		]

        if(project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')) {
            ciUsr = sonatypeUsername
            ciPwd = sonatypePassword
        } else {
            ciUsr = "$System.env.CI_DEPLOY_USERNAME"
            ciPwd = "$System.env.CI_DEPLOY_PASSWORD"
        }

        prefix              = 'lb'
        isReleaseVersion    = !version.endsWith("SNAPSHOT")
        gitRoot             = "https://github.com/lburgazzoli"
        gitProject          = "https://github.com/lburgazzoli/lb-axon"
        deploySnapshot      = "https://oss.sonatype.org/content/repositories/snapshots"
    }
    
    repositories {
        mavenCentral()
        mavenLocal()
    }

    dependencies {
        compile "org.apache.commons:commons-lang3:$versions.commonsLang"
        compile "org.apache.commons:commons-collections4:$versions.commonsCollections"
        compile "commons-beanutils:commons-beanutils:$versions.commonsBeanutils"
        compile "org.slf4j:slf4j-api:$versions.slf4j"
        compile "org.slf4j:slf4j-ext:$versions.slf4j"
        compile "org.slf4j:jul-to-slf4j:$versions.slf4j"
        compile "org.slf4j:jcl-over-slf4j:$versions.slf4j"        
        compile "org.apache.geronimo.specs:geronimo-jpa_2.0_spec:1.1"
        compile "org.axonframework:axon-core:$versions.axon"
        compile "org.axonframework:axon-distributed-commandbus:$versions.axon"
        compile "org.jgroups:jgroups:$versions.jgroups"
		compile "org.codehaus.groovy:groovy:$versions.groovy"
		compile "joda-time:joda-time:$versions.jodaTime"
		
		testCompile "junit:junit:$versions.junit"
    }

    jar {
        baseName = "${project.prefix}-${project.name}"

        manifest.attributes['Bundle-Description'     ] = "${project.prefix} :: ${project.name}"
        manifest.attributes['Bundle-Name'            ] = "${project.prefix} :: ${project.name}"
        manifest.attributes['Bundle-SymbolicName'    ] = "${project.group}-${project.prefix}-${project.name}"
        manifest.attributes['Bundle-Version'         ] = project.version
        manifest.attributes['Implementation-Title'   ] = "${project.group}-${project.prefix}-${project.name}-${project.version}"
        manifest.attributes['Implementation-Version' ] = project.version
        manifest.attributes['Implementation-Vendor'  ] = 'lb'

        manifest.classesDir = new File("$buildDir/classes/main")
        manifest.classpath  = project.runtimeClasspath
    }

    test {
        testLogging {
            events "failed"
            exceptionFormat "full"
        }
    }

    [compileJava, compileTestJava]*.options*.compilerArgs = [
        "-Xlint:unchecked",
        "-Xlint:deprecation",
    ]

    // *************************************************************************
    //
    // *************************************************************************

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from 'build/docs/javadoc'
    }

    task sourcesJar(type: Jar) {
        from sourceSets.main.allSource
        classifier = 'sources'
    } 

    // *************************************************************************
    //
    // *************************************************************************

    artifacts {
        archives jar
        archives javadocJar
        archives sourcesJar
    }

    uploadArchives {
        repositories {
            mavenDeployer {

                repository(url: deploySnapshot) {
                    authentication(
                        userName: "${project.ciUsr}",
                        password: "${project.ciPwd}"
                    )
                }

                pom {
                    project {
                        name          = "${project.prefix}-${project.name}"
                        description   = "${project.prefix}-${project.name}"
                        url           = "${project.gitProject}"
                        packaging     = 'jar'

                        licenses {
                            license {
                        	    name         = "The Apache Software License, Version 2.0"
                        		url          = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                        		distribution = "repo"
                        	}
                        }

                        scm {
                            url                 = "${project.gitProject}"
                            connection          = "scm:git:${project.gitProject}.git"
                            developerConnection = "scm:git:${project.gitProject}.git"
                        }
                    }
                }
            }
        }
    }
}

// *****************************************************************************
//
// *****************************************************************************

task wrapper(type: Wrapper) {
    gradleVersion = '2.0'
}

